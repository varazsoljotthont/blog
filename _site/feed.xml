<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-02-09T05:26:57+01:00</updated><id>http://localhost:4000/</id><title type="html">LittlevGL’s Blog</title><subtitle>News and Tutorials for Embedded GUI Enthusiasts: Release notes of LittlevGL, Tutorials, Poring guides, Development board and microcontroller test, ideas, tips and tricks and more.</subtitle><author><name>Gabor Kiss-Vamosi</name><email>kisvegabor@gmail.com</email></author><entry><title type="html">How to use the iPod Nano 6 LCD for LittlevGL</title><link href="http://localhost:4000/2019-02-02/use-ipod-nano6-lcd-for-littlevgl" rel="alternate" type="text/html" title="How to use the iPod Nano 6 LCD for LittlevGL" /><published>2019-02-02T00:00:00+01:00</published><updated>2019-02-02T00:00:00+01:00</updated><id>http://localhost:4000/2019-02-02/use-ipod-nano6-lcd-for-littlevgl</id><content type="html" xml:base="http://localhost:4000/2019-02-02/use-ipod-nano6-lcd-for-littlevgl">&lt;p&gt;&lt;strong&gt;This blog tells you how to hack the screen that is supposed to display in an Apple’s iPodNano6 for LittlevGL with an Espressif ESP32 Wifi/BLE SoC.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the source code can be downloaded at the bottom of the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/Running_littlevGL.JPG&quot; alt=&quot;Running_littlevGL with i Pod Nano6's display&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;something-about-mipi-dsi&quot;&gt;Something about MIPI DSI&lt;/h2&gt;
&lt;p&gt;LCD for iPod Nano6 uses MIPI Display Serial Interface (MIPI DSI) which is a high-speed serial interface between a host processor and a display module. LCDs belong to this category are very common for smartphones, tablets, and smartwatches. Reference is available from &lt;a href=&quot;https://www.mipi.org/specifications/dsi&quot;&gt;MIPI alliance page&lt;/a&gt;. Some MIPI LCDs on hands are shown here.
&lt;img src=&quot;/assets/iPodNano6/Some_mipi_displays.jpg&quot; alt=&quot;Some mipi displays&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Googling&lt;/em&gt; the keyword MIPI brings up several pdf documents of hundred pages. It is always fun to learn from specifications like this - http://bfiles.chinaaet.com/justlxy/blog/20171114/1000019445-6364627609238902374892404.pdf.
It states &lt;em&gt;“MIPI DSI specifies the interface between a host processor and a display…”&lt;/em&gt; and finally a picture like this shows up that I can barely understand.
&lt;img src=&quot;/assets/iPodNano6/mipi_IF.jpg&quot; alt=&quot;MIPI interface&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If a 100-pages specification takes too much time, this may be all you need to know about MIPI D’PHY RX&lt;br /&gt;
&lt;a href=&quot;https://www.edn.com/Pdf/ViewPdf?contentItemId=4440302&quot;&gt;https://www.edn.com/Pdf/ViewPdf?contentItemId=4440302&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Transmission speed of MIPI is very high, ranging from 1.0Gbps/lane to 4.5Gbps/lane with 1-4 data lane plus 1 clock signal all in differential buses. Voltage swing driven by the difference buses is also different from RGB/MCU-typed LCD. For MIPI DSI there are high-speed (HS) and low-speed (LS) modes to drive 200mV peak-to-peak and 1.2V whereas data of RGB/MCU-typed LCDs is carried with single-ended signals matching VDDIO of MCU host.&lt;br /&gt;
Table below summaries the difference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/mipi_vs_conventional-LCD.jpg&quot; alt=&quot;MIPI-vs-conventional-LCD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Usually interface of a MIPI LCD needs much less pins and lower voltage than its MCU/RGB counterpart. 
&lt;img src=&quot;/assets/iPodNano6/Pinout_compare.jpg&quot; alt=&quot;MIPI-vs-conventional-LCD piiout compare&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mipi-bridge-chip&quot;&gt;MIPI bridge Chip&lt;/h2&gt;
&lt;p&gt;The problem is, how do we drive a MIPI display when there is no DSI output from our MCU (like ESP32) and how to port it to LittlevGL? Here comes the MIPI bridge IC - SSD2805, which is an interface chip to convert between RGB/8080 video signal to MIPI signal. 
&lt;img src=&quot;/assets/iPodNano6/SSD2805_top.jpg&quot; alt=&quot;&quot; /&gt;
This is a very tiny chip of 5*5mm with 0.5mm pitch BGA!
&lt;img src=&quot;/assets/iPodNano6/SSD2805_bottom.jpg&quot; alt=&quot;SSD2805 bottom&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;block-diagram-of-my-setup&quot;&gt;Block diagram of my setup&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/block_diagram.jpg?raw=true&quot; alt=&quot;LittlevGL - iPod Nano 6 system architecture&quot; /&gt;
ESP32 is programmed with ESP-IDF (Espressif IoT Development Framework). Its installation procedure is described in full details at &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html&quot;&gt;Espressif’s documentation site&lt;/a&gt;. My host computer is a Windows 7 Pro SP1 64-bit Operating System. Hardware is an old Intel Core i5 with 8GB RAM. I have followed the default installation path described in ESP-IDF’s Getting Started Guide. It gave me back a mingw32.exe application under C:\msys32.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/mingw32_folders.jpg&quot; alt=&quot;mingw32 folders&quot; /&gt;
At first I was not comfortable with command line tool like mingw32.exe. With innumerable Google searches I tried to install Eclipse IDE. Unfortunately all hours in Eclipse became futile. At the end I found the time spent on configuring Eclipse was even more than programming itself so I just gave it up. Don’t mean Eclipse is bad. It is just me not able to get it work.&lt;/p&gt;

&lt;p&gt;Because there is no standard evaluation kit for ESP32 + SSD2805 + MIPI Display combo, I was forced to use jumper cables to wire up things with mess like this :(
&lt;img src=&quot;/assets/iPodNano6/messy_wireup.JPG&quot; alt=&quot;LittlevGL - iPod Nano 6 messy wire up&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;/h2&gt;
&lt;p&gt;Boards employed include:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ESP32-Pico-Kit v4&lt;/li&gt;
  &lt;li&gt;SSD2805 breakout board Release 3&lt;/li&gt;
  &lt;li&gt;1.54 inch LH154Q01 MIPI display with CTP on PCB. SSD2541 CTP driver is soldered on this board.&lt;/li&gt;
  &lt;li&gt;Plus a lot jumper cables!
The pinout diagram is illustrated below.
&lt;img src=&quot;/assets/iPodNano6/pinout_eps32_LCD.jpg&quot; alt=&quot;ESP32 LCD Pinout&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;
&lt;p&gt;To work with LittlevGL, the prerequisite is a fully working LCD and touch screen drivers outside it. I started with a program of 5 source files to drive the LCD listed below:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. i2s_8080_hello_world.c
2. SSD2805_8080_drv.c and .h
3. i2s_lcd.c and .h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Source files i2s_lcd.c and .h were modified from their &lt;a href=&quot;https://github.com/espressif/esp-iot-solution/tree/master/components/i2s_devices/lcd_common&quot;&gt;GitHub source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ESP32 uses I2S module to write in 8080 8-bit parallel mode. DMA is used to queue command and data.&lt;/p&gt;

&lt;p&gt;Full source code of this project &lt;code class=&quot;highlighter-rouge&quot;&gt;i2s_8080_lcd&lt;/code&gt;can be downloaded at the end of this page.&lt;/p&gt;

&lt;p&gt;To compile this project, just copy the complete folder to any place you find it convenient, in my case it is &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\esp32\i2s_8080_lcd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Launch mingw32.exe from C:/msys32
&lt;img src=&quot;/assets/iPodNano6/Launch_mingw32.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Change directory to the root of Makefile with &lt;code class=&quot;highlighter-rouge&quot;&gt;cd D:/esp32/i2s_8080_lcd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/cd_i2s_8080_lcd_dir.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the right serial port with &lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/make_menuconfig.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Browse to Serial flasher config —&amp;gt; set it to COM2 (for my case).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/COM2_to_use.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click EXIT several times and click &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Yes&amp;gt;&lt;/code&gt; at the end to save new configurations.&lt;/p&gt;

&lt;p&gt;The last step is to &lt;code class=&quot;highlighter-rouge&quot;&gt;make flash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/make_flash.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now a fake AppleWatch is visible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/AppleWatch.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Screen capture below shows all public functions of SSD2805. No text print, no shape draw or framebuffer operation. All GUI-related features are left to LittlevGL with a single API function &lt;code class=&quot;highlighter-rouge&quot;&gt;SSD2805_dispFlush(args)&lt;/code&gt;, which has been designed to match the blueprint required not more or less. This is also the only function get called when screen refresh or update is required.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/iPodNano6/SSD2805_8080_drv_h.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly the driver for CTP was developed and tested with basic program that prints coordinates of finger with pressure to serial port. Screen capture of SSD2541.h is shown below. API function &lt;code class=&quot;highlighter-rouge&quot;&gt;SSD2541_getPoint(args)&lt;/code&gt; is the only interface required by LittlevGL.
&lt;img src=&quot;/assets/iPodNano6/SSD2541_h.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In mingw32 console type &lt;code class=&quot;highlighter-rouge&quot;&gt;cd D:/esp32/SSd2541_drv_test&lt;/code&gt;, repeat the same procedure as SSD2805 by &lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt;, set Serial flasher config —&amp;gt; to COM2 (in my case). Save changes and finally &lt;code class=&quot;highlighter-rouge&quot;&gt;make flash&lt;/code&gt;. This time we need a terminal program like Serial Monitor of Arduino. Screen capture below shows a stream from Serial Monitor with finger released from (96,113), touched at (88,117) with varying pressure and then released again. LittlevGL requires that touch coordinates shoud be the last valid point when the figner is released. 
&lt;img src=&quot;/assets/iPodNano6/SSD2541_finger_event.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Everthing seems ready for porting LittlevGL. The last program &lt;code class=&quot;highlighter-rouge&quot;&gt;littlevgl_port&lt;/code&gt; is the final example of this blog to demonstrate several LittlevGL features (not all) including label, button, and image display. Browse to the components folder you will see exactly the same driver for SSD2805 and SSD2541. lvgl (version 5.3 commit 17c19fc) has been pulled directly from github. 
&lt;img src=&quot;/assets/iPodNano6/littlevgl_port_components.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are few somethings to do before LittlevGL can be used:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;modify &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_conf.h&lt;/code&gt; from its template for our screen resolution. This header is located in the same root as Makefile, the project directory.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Horizontal and vertical resolution of the library.*/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LV_HOR_RES          (240)
#define LV_VER_RES          (240)
#define LV_DPI              100
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;In the main file &lt;code class=&quot;highlighter-rouge&quot;&gt;littlevgl_example.c&lt;/code&gt;, define a local function to call &lt;code class=&quot;highlighter-rouge&quot;&gt;SSD2805_dispFlush(args)&lt;/code&gt; and then inform LittlevGL that screen flush is ready with &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_flush_ready()&lt;/code&gt;.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * @brief   API for LittlevGL with LV_VDB_SIZE!=0 in lv_conf.h
 */&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ex_disp_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_color_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;SSD2805_dispFlush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;lv_flush_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;In the main file &lt;code class=&quot;highlighter-rouge&quot;&gt;littlevgl_example.c&lt;/code&gt;, define a local function to call &lt;code class=&quot;highlighter-rouge&quot;&gt;SSD2541_getPoint(args)&lt;/code&gt; to store the last valid finger position to data-&amp;gt;point.x and point.y. Pressure is not required for LittelvGL so a NULL is passed.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * @brief   API for touch screen
 */&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ex_tp_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_indev_data_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;int16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctp_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctp_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSD2541_getPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctp_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctp_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_INDEV_STATE_PR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_INDEV_STATE_REL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
 &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctp_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctp_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Define a tick function as heart-beat for LittlevGL and register this function for ESP32.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * @brief   Heart beat for LittlevGL
 */&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lv_tick_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;lv_tick_inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portTICK_RATE_MS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;esp_register_freertos_tick_hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_tick_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//this is specific to ESP32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The last step is to initialize SSD2805, SSD2541, lv_init(), and register the API functions.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;SSD2805_begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;SSD2541_begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;lv_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
 &lt;span class=&quot;n&quot;&gt;lv_disp_drv_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disp_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;lv_disp_drv_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disp_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;disp_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disp_flush&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex_disp_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;lv_disp_drv_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disp_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;lv_indev_drv_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;cm&quot;&gt;/*Descriptor of an input device driver*/&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;lv_indev_drv_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                  &lt;span class=&quot;cm&quot;&gt;/*Basic initialization*/&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_INDEV_TYPE_POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/*The touchpad is pointer type device*/&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex_tp_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    &lt;span class=&quot;cm&quot;&gt;/*Library ready your touchpad via this function*/&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;lv_indev_drv_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;              &lt;span class=&quot;cm&quot;&gt;/*Finally register the driver*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The result is a fully operational CTP with button, image display, and text printing!
&lt;img src=&quot;/assets/iPodNano6/Running_littlevGL.JPG&quot; alt=&quot;LittlevGL ESP32 Ipod Nano 6 display example 1&quot; /&gt;
&lt;img src=&quot;/assets/iPodNano6/child.JPG&quot; alt=&quot;LittlevGL ESP32 Ipod Nano 6 display example 2&quot; /&gt;
&lt;img src=&quot;/assets/iPodNano6/polynesia.JPG&quot; alt=&quot;LittlevGL ESP32 Ipod Nano 6 display example 3&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/iPodNano6/i2s_8080_lcd.zip&quot;&gt;I2S 8080 LCD driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/iPodNano6/SSD2541_drv_test.zip&quot;&gt;SSD2541 driver test&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/iPodNano6/littlevgl_port.zip&quot;&gt;Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>techtoys</name></author><summary type="html">This blog tells you how to hack the screen that is supposed to display in an Apple’s iPodNano6 for LittlevGL with an Espressif ESP32 Wifi/BLE SoC.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/def_post_cover.png" /></entry><entry><title type="html">Espressif officially supports LittlevGL on ESP32! Let’s try it!</title><link href="http://localhost:4000/2019-01-31/esp32" rel="alternate" type="text/html" title="Espressif officially supports LittlevGL on ESP32!  Let's try it!" /><published>2019-01-31T00:00:00+01:00</published><updated>2019-01-31T00:00:00+01:00</updated><id>http://localhost:4000/2019-01-31/esp32</id><content type="html" xml:base="http://localhost:4000/2019-01-31/esp32">&lt;p&gt;&lt;strong&gt;Espressif &lt;a href=&quot;https://www.espressif.com/en/news/ESP32_Modules_Now_Support_LittlevGL_and_%CE%BCGFX&quot;&gt;has announced&lt;/a&gt; that they support LittlevGL on their ESP32 chips. 
Adding GUI to your ESP32 based IoT device is easier than ever.  I made it work in 15 minutes, so it’s really worth a try! I will show an other project too where I achieved 30 FPS with ESP32 on 320 x 240 display.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are some examples created by the Espressif:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/esp32/esp_example1.jpg&quot; alt=&quot;Audio player example on ESP32 with LittlevGL&quot; /&gt;
&lt;em&gt;Audio player example on ESP32 with LittlevGL&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/esp32/esp_example2.jpg&quot; alt=&quot;Coffee maker and thermostat example on ESP32 with LittlevGL&quot; /&gt;
&lt;em&gt;Coffee maker and thermostat example on ESP32 with LittlevGL&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;still-dont-know-esp32&quot;&gt;Still don’t know ESP32?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.espressif.com/en/products/hardware/esp32/overview&quot;&gt;ESP32&lt;/a&gt; is powerful SoC (System on Chip) develped by &lt;a href=&quot;https://www.espressif.com/en&quot;&gt;Espressif&lt;/a&gt;. 
The modules built with the chip are extremely popular in IoT applications where &lt;strong&gt;connectivity&lt;/strong&gt; and &lt;strong&gt;low-power operation&lt;/strong&gt; are a must. In addition, ESP32 provides high performance with a &lt;strong&gt;dual-core 200 MHz MCU&lt;/strong&gt;. 
The modules are usually equipped with &lt;strong&gt;external flash (typically 4 MB)&lt;/strong&gt; which can be mapped as program memory.&lt;/p&gt;

&lt;p&gt;Regarding the connectivity, the modules come with &lt;strong&gt;fully certified Wi-Fi, BT, and BLE&lt;/strong&gt; interfaces.&lt;/p&gt;

&lt;p&gt;One of the most &lt;strong&gt;popular modules&lt;/strong&gt; is &lt;a href=&quot;https://hu.mouser.com/ProductDetail/Espressif-Systems/ESP32-WROOM-32?qs=chTDxNqvsyltcwz%2FUUJDtQ%3D%3D&quot;&gt;ESP32 WROOM&lt;/a&gt; for &lt;strong&gt;only $4&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To get started you should buy a &lt;strong&gt;development board&lt;/strong&gt; with an ESP32 module. For example &lt;a href=&quot;https://hu.mouser.com/ProductDetail/Espressif-Systems/ESP32-DevKitC?qs=sGAEpiMZZMurtJ7VwBTl0Rm64lZhrtuCiot%2fLDk%252bF2ilRoHMowv5Wg%3d%3d&quot;&gt;ESP32-DevkitC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/esp32/esp_devkitc.jpg&quot; alt=&quot;ESP32-DevKitC&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;don’t need any extra hardware&lt;/strong&gt; like a programmer because the ESP32 can be &lt;strong&gt;programmed via a Serial Port&lt;/strong&gt; using a simple Micro USB cable.&lt;/p&gt;

&lt;h2 id=&quot;gui-with-esp32&quot;&gt;GUI with ESP32&lt;/h2&gt;

&lt;p&gt;Although the ESP32 chip doesn’t have an RGB LCD interface or a parallel port to drive a display it has &lt;strong&gt;fast SPI ports&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cdn-shop.adafruit.com/datasheets/ILI9341.pdf&quot;&gt;ILI9341&lt;/a&gt;, 
&lt;a href=&quot;https://www.numworks.com/shared/binary/datasheets/st7789v-lcd-controller-73f8bc3e.pdf&quot;&gt;ST7789&lt;/a&gt; 
&lt;a href=&quot;https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf&quot;&gt;SSD1306&lt;/a&gt; are three display controllers which actually have SPI interface and you will find a lot of displays modules equipped with them.&lt;/p&gt;

&lt;h3 id=&quot;what-graphical-performance-can-you-expect-from-esp32&quot;&gt;What graphical performance can you expect from ESP32?&lt;/h3&gt;

&lt;p&gt;There are two main things which determine the graphical performance:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Rendering time&lt;/strong&gt; the time to draw a frame (or a part of it).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Flushing time&lt;/strong&gt; the time to transfer the rendered image to the display.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;strong&gt;rendering time&lt;/strong&gt; depends on the speed of the MCU. A GPU can speed it up but unfortunately, ESP32 doesn’t have any. Anyway, a 200 MHz core speed should be fine the render nice GUIs fast enough!&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;flushing time&lt;/strong&gt; depends on the system’s architecture and the peripheries of the MCU. In the case of ESP32, you need to use SPI to send the rendered frame to the display controller.&lt;/p&gt;

&lt;h3 id=&quot;some-calculations&quot;&gt;Some calculations&lt;/h3&gt;
&lt;p&gt;By default the &lt;strong&gt;maximum SPI clock speed&lt;/strong&gt; of ESP32 is &lt;strong&gt;40 MHz&lt;/strong&gt;. What does it mean? On a 320x240 disply with 16 bit color depth you need to transfer  &lt;em&gt;320 x 240 x 16 = 1,228,000 bits&lt;/em&gt;. On 40 MHz it means &lt;em&gt;1,228,000 / 40,000,000 = 30 ms&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So to &lt;strong&gt;transfer a full frame 30 ms&lt;/strong&gt; is required.&lt;/p&gt;

&lt;p&gt;If you have e.g. 40 ms rendering time the whole process takes 70 ms which means only 14 FPS.&lt;/p&gt;

&lt;h3 id=&quot;how-to-speed-esp32-for-gui-applications&quot;&gt;How to speed ESP32 for GUI applications?&lt;/h3&gt;

&lt;p&gt;There are two options:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Speed up SPI&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make the flushing and rendering parallel&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s discuss the &lt;strong&gt;SPI speed&lt;/strong&gt; first. This table is from ILI9341’s datasheet (page 230):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/esp32/ili9341_spi_timing.png&quot; alt=&quot;ILI9341 SPI timing&quot; /&gt;
&lt;em&gt;ILI9341 SPI timing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The first line says the one clock period can be minimum 100 ns which means only 10 MHz. It would be extremely slow.&lt;/p&gt;

&lt;p&gt;It turned out that ILI9341 actually &lt;a href=&quot;http://www.eevblog.com/forum/microcontrollers/ili9341-lcd-driver-max-spi-clock-speed/&quot;&gt;works at higher clock rates&lt;/a&gt; too. 
They say 48MHz is even possible but it’s still not a big gain compared to the 40 MHz in the previous calculation.&lt;/p&gt;

&lt;p&gt;Anyway, in ESP32 you can &lt;strong&gt;increase the SPI speed to 80 MHz&lt;/strong&gt; if you use dedicated pins.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/spi_master.html#gpio-matrix-and-iomux&quot;&gt;ESP32 SPI documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;When the GPIO matrix is used, signals faster than 40MHz cannot propagate and the setup time of MISO is more easily violated, since the input delay of MISO signal is increased. The maximum clock frequency with GPIO Matrix is 40MHz or less, whereas using all IOMUX pins allows 80MHz.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So just choose the following SPI pins to have an 80 MHz clock speed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/esp32/esp_spi_80mhz.png&quot; alt=&quot;ESP32 SPI: 80 MHz pin configuration&quot; /&gt;
&lt;em&gt;ESP32 SPI: 80 MHz pin configuration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To drive a display only &lt;em&gt;MOSI&lt;/em&gt; and &lt;em&gt;SCLK&lt;/em&gt; is required from the table.&lt;/p&gt;

&lt;p&gt;So let’s use the faster pins. The maximum clock rate is still 40 MHz because of ILI9341 but hopefully, it will give better signals.&lt;/p&gt;

&lt;p&gt;To &lt;strong&gt;make the rendering and flushing parallel&lt;/strong&gt; you should use &lt;strong&gt;SPI with DMA&lt;/strong&gt;. The DMA makes possible to send the rendered image via SPI in the background and let the CPU to do other things. 
ESP32 supports using DMA with SPI so it’s just the question of the driver and some LittlevGL configuration. (Enable &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_VDB_DOUBLE&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_conf.h&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&quot;build-and-flush-and-official-example&quot;&gt;Build and flush and official example&lt;/h2&gt;

&lt;h3 id=&quot;install-esp32-toolchain&quot;&gt;Install ESP32 toolchain&lt;/h3&gt;
&lt;p&gt;To get started you need to &lt;strong&gt;install ESP32 development toolchain&lt;/strong&gt;.  Refer to this &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/index.html&quot;&gt;Guide&lt;/a&gt; and follow the steps.&lt;/p&gt;

&lt;h3 id=&quot;get-esp-iot-solution&quot;&gt;Get ESP IoT Solution&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/espressif/esp-iot-solution&quot;&gt;ESP IoT Solution&lt;/a&gt; is a huge collection of&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;drivers&lt;/li&gt;
  &lt;li&gt;libraries&lt;/li&gt;
  &lt;li&gt;and examples&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clone it somewhere (preferably in the &lt;code class=&quot;highlighter-rouge&quot;&gt;esp&lt;/code&gt; folder where the toolchain was installed):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/esp/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/espressif/esp-iot-solution --recurse-submodules&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export IOT_SOLUTION_PATH=~/esp/esp-iot-solution&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;configure-an-example&quot;&gt;Configure an example&lt;/h3&gt;
&lt;p&gt;Choose an example and configure it:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd esp-iot-solution/examples/hmi/lvgl_example&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make defconfig&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the &lt;strong&gt;menuconfig&lt;/strong&gt; go to &lt;strong&gt;IoT Solution Settings &amp;gt; IoT Component Management &amp;gt; HMI Components &amp;gt; LVGL Settings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Config Driver&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Choose your screen driver. In my case it was ILI9341&lt;/li&gt;
  &lt;li&gt;Set the Screen pins as shown in the image below&lt;/li&gt;
  &lt;li&gt;Set the LCD SPI clock to 40,000,000. It was the maximum value so the previously calculated 80 MHz can’t be tried here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/esp32/menuconfig1.jpg&quot; alt=&quot;Configuration of ESP to run a LittlevGL example&quot; /&gt;
&lt;em&gt;Configuration of ESP to run a LittlevGL example&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you enter into Touch Screen pin configuration you will see only &lt;em&gt;CS&lt;/em&gt; and &lt;em&gt;IRQ&lt;/em&gt; pin settings. 
Which means that it uses the same SPI as the Screen driver and the &lt;em&gt;MOSI&lt;/em&gt;, &lt;em&gt;MISO&lt;/em&gt; and &lt;em&gt;CLK&lt;/em&gt; pins are shared.
However, my screen has dedicated SPI pins for the touchpad and the screen and I didn’t have “Y” cables. So I disabled touchpad for now in “LittlevGL Touchscreen Enable”.&lt;/p&gt;

&lt;p&gt;In the main menu of &lt;em&gt;menuconfig&lt;/em&gt; in  &lt;em&gt;Serial flasher config&lt;/em&gt; be sure the correct Serial port is selected. (ESP32 needs to be connected to your PC to see which Serial port is used.)&lt;/p&gt;

&lt;p&gt;After that save the settings and exit menuconfig.&lt;/p&gt;

&lt;h3 id=&quot;build-and-flash&quot;&gt;Build and flash&lt;/h3&gt;
&lt;p&gt;To build and flash type into the Terminal:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; to build the project. Or &lt;code class=&quot;highlighter-rouge&quot;&gt;make -j8&lt;/code&gt; to build on 8 threads.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make flash&lt;/code&gt; to program the ESP&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And the result is:
&lt;img src=&quot;/assets/esp32/esp_official_littlevgl_example.jpg&quot; alt=&quot;Running an official LittlevGL example on ESP32&quot; /&gt;
 &lt;em&gt;Running an official LittlevGL example on ESP32&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;littlevgl-with-esp-idf-directly&quot;&gt;LittlevGL with ESP-IDF directly&lt;/h2&gt;
&lt;p&gt;If you want a &lt;strong&gt;more simple project&lt;/strong&gt; with more freedom you should use &lt;a href=&quot;https://github.com/espressif/esp-idf&quot;&gt;ESP-IDF&lt;/a&gt; which is the core ESP SDK.&lt;/p&gt;

&lt;p&gt;There is a LittlevGL project you can use with ESP-IDF: &lt;a href=&quot;https://github.com/littlevgl/esp32_ili9431&quot;&gt;https://github.com/littlevgl/esp32_ili9431&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This project comes with an &lt;strong&gt;ILI9341&lt;/strong&gt; display driver and an &lt;strong&gt;XPT2046&lt;/strong&gt; touchpad driver. The display driver uses DMA and &lt;strong&gt;makes rendering and flushing parallel&lt;/strong&gt; which result in a decent frame rate.
You can customize these drivers according to your needs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get this projects: &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/littlevgl/esp32_ili9431.git --recurse-submodules&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add LittlevGL to the build. Copy &lt;code class=&quot;highlighter-rouge&quot;&gt;lvgl_component.mk&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_example_component.mk&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;component.mk&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;lvgl&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_examples&lt;/code&gt; directories respectively.&lt;/li&gt;
  &lt;li&gt;Connect the touch pad (optional):
    &lt;ul&gt;
      &lt;li&gt;MOSI : 32&lt;/li&gt;
      &lt;li&gt;MISO : 25&lt;/li&gt;
      &lt;li&gt;SCLK : 26&lt;/li&gt;
      &lt;li&gt;CS : 33&lt;/li&gt;
      &lt;li&gt;IRQ : 25&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make flash&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/esp32/esp32_littlevgl_gui.jpg&quot; alt=&quot;ESP32 is running a LittlevGL example&quot; /&gt;
&lt;em&gt;ESP32 is running a LittlevGL example&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-fps-can-be-achieved&quot;&gt;What FPS can be achieved?&lt;/h3&gt;

&lt;p&gt;With the GUI on the above image - by making rendering and flushing parallel - I achieved about &lt;strong&gt;30 FPS&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;ESP-IoT-Solution is a great an easy-to-use framework. As you can see it takes only a few minutes to get started.&lt;/p&gt;

&lt;p&gt;However, you can use ESP-IDF as well to try LittlevGL. This way you will have more control over your project.&lt;/p&gt;

&lt;p&gt;If you have a product with ESP32 and LittlevGL you can share it among &lt;a href=&quot;https://blog.littlevgl.com/2018-12-26/references&quot;&gt;LittlevGL References&lt;/a&gt;.&lt;/p&gt;</content><author><name>kisvegabor</name></author><summary type="html">Espressif has announced that they support LittlevGL on their ESP32 chips. Adding GUI to your ESP32 based IoT device is easier than ever. I made it work in 15 minutes, so it’s really worth a try! I will show an other project too where I achieved 30 FPS with ESP32 on 320 x 240 display.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/esp32/cover.png" /></entry><entry><title type="html">Hardware button usage</title><link href="http://localhost:4000/2019-01-08/hardware-button" rel="alternate" type="text/html" title="Hardware button usage" /><published>2019-01-08T00:00:00+01:00</published><updated>2019-01-08T00:00:00+01:00</updated><id>http://localhost:4000/2019-01-08/hardware-button</id><content type="html" xml:base="http://localhost:4000/2019-01-08/hardware-button">&lt;p&gt;&lt;strong&gt;We use the STM32F429I-DISC1 Discovery kit to test for the LittlevGL hardware button capability. The board have two push-buttons: USER and RESET [1]. We use USER push-button. User button connected to the I/O PA0 of STM32F429ZIT6 [2].  The board have six LEDs. We use LD3 (green LED). The green LED is a user LED connected to the I/O PG13 of the STM32F429ZIT6 [2].&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We aim to toggle LD3 LED when both harware button (USER push-pull) and UI button click.&lt;/p&gt;

&lt;p&gt;Our hardware button driver register function is&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_button_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_indev_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lv_indev_drv_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;lv_indev_drv_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_input_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_INDEV_TYPE_BUTTON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;indev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_indev_drv_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indev_drv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_point_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lv_indev_set_button_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_INDEV_TYPE_BUTTON&lt;/code&gt;: External (hardware button) which is assinged to a specific point of the screen&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;my_input_read&lt;/code&gt; is function for harware button status (press-release).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;points_array&lt;/code&gt;: these points will be assigned to the buttons to press a specific point on the screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We create a button. The &lt;code class=&quot;highlighter-rouge&quot;&gt;points_array&lt;/code&gt;’s first element (20px,20px) is selected any point in the UI button’s area (x: 0-40px, y: 0-40px).&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_btn_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_scr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;lv_obj_set_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_obj_set_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_btn_set_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_BTN_ACTION_CLICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn_click_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;btn_click_action&lt;/code&gt; toggles only LD3 LED.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_res_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;btn_click_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HAL_GPIO_TogglePin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_PIN_13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my_btn_read&lt;/code&gt; function read hardware button data and return hardware button ID.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_btn_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HAL_GPIO_ReadPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIOA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_PIN_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my_input_read&lt;/code&gt; function return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; if there is still data to be read (buffered), otherwise &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_input_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_indev_data_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* Store the last pressed button */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn_pr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_btn_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Get the ID (0,1,2...) of the pressed button */&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn_pr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                &lt;span class=&quot;cm&quot;&gt;/* Is there a button press? */&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;last_btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn_pr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/* Save the ID of the pressed button */&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_INDEV_STATE_PR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Set the pressed state */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_INDEV_STATE_REL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Set the released state */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;cm&quot;&gt;/* Set the last button */&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    &lt;span class=&quot;cm&quot;&gt;/* No buffering so no more data read */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In last step we call &lt;code class=&quot;highlighter-rouge&quot;&gt;button_init&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// GPIO Init: LED, Button&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// LittlevGL&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;button_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TODO: Share the complete project&lt;/p&gt;

&lt;p&gt;Acknowledgment: We preapare this tutorial with &lt;a href=&quot;https://github.com/ogunduz&quot;&gt;Orhan Gunduz&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.st.com/en/evaluation-tools/32f429idiscovery.html&quot;&gt;STM32F429I-DISC1 website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.st.com/content/ccc/resource/technical/document/user_manual/6b/25/05/23/a9/45/4d/6a/DM00093903.pdf/files/DM00093903.pdf/jcr:content/translations/en.DM00093903.pdf&quot;&gt;UM1670 User manual Discovery kit with STM32F429ZI MCU&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/littlevgl/lvgl/issues/567#issuecomment-446586421&quot;&gt;LittlevGL issue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dk772McmJs4&quot;&gt;Youtube video&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>seyyah, ogunduz</name></author><summary type="html">We use the STM32F429I-DISC1 Discovery kit to test for the LittlevGL hardware button capability. The board have two push-buttons: USER and RESET [1]. We use USER push-button. User button connected to the I/O PA0 of STM32F429ZIT6 [2]. The board have six LEDs. We use LD3 (green LED). The green LED is a user LED connected to the I/O PG13 of the STM32F429ZIT6 [2].</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/hardware_button/logo.jpg" /></entry><entry><title type="html">Running LittlevGL PC Simulator from Qt-Creator in Windows</title><link href="http://localhost:4000/2019-01-03/qt-creator" rel="alternate" type="text/html" title="Running LittlevGL PC Simulator from Qt-Creator in Windows" /><published>2019-01-03T00:00:00+01:00</published><updated>2019-01-03T00:00:00+01:00</updated><id>http://localhost:4000/2019-01-03/qt-creator</id><content type="html" xml:base="http://localhost:4000/2019-01-03/qt-creator">&lt;p&gt;Qt-Creator is a powerful IDE and is easy manage non Qt project too.
With the latest release Qt 5.12.0, GCC x64 compiler, Windows is also supported.
This is a step by step tutorial&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;to run LittlevGL PC simulator&lt;/li&gt;
  &lt;li&gt;in Windows 10&lt;/li&gt;
  &lt;li&gt;from Qt-Creator 4.8.0&lt;/li&gt;
  &lt;li&gt;with Mingw 64 bit compiler.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Qt-Creator and Mingw-64bit environment. Refer to https://www.qt.io/ to install the open source version of Qt environment.&lt;/li&gt;
  &lt;li&gt;SDL2 developement libraries for mingw: https://www.libsdl.org/download-2.0.php&lt;/li&gt;
  &lt;li&gt;LittlevGL PC Simulator: https://littlevgl.com/pc-simulator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;copy-sdl2-libraries&quot;&gt;Copy SDL2 libraries&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In &lt;em&gt;pc_simulator&lt;/em&gt; folder create a subfolder named &lt;em&gt;SDL2&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Copy sdl header files there.&lt;/li&gt;
  &lt;li&gt;Create &lt;em&gt;SDL2/lib&lt;/em&gt; subfolder and copy libraries for i686-w64 from SDL2 package.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;settin-up-qt-creator-project&quot;&gt;Settin up Qt-Creator project&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Open Qt-Creator&lt;/li&gt;
  &lt;li&gt;from &lt;strong&gt;file&lt;/strong&gt; menu select &lt;strong&gt;new file or project&lt;/strong&gt;.
    &lt;ul&gt;
      &lt;li&gt;in the form select &lt;strong&gt;non-Qt-project&lt;/strong&gt; and &lt;strong&gt;plain C application&lt;/strong&gt;. Press &lt;strong&gt;choose&lt;/strong&gt; button.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/qt_creator/new_project.PNG&quot; alt=&quot;Qt-Creator project set up&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in the project management form:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;location&lt;/strong&gt;: select project directory location and type a project name (ex. : pc_sim). press &lt;strong&gt;next&lt;/strong&gt; button.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;build system&lt;/strong&gt;: select &lt;strong&gt;qmake&lt;/strong&gt;. press &lt;strong&gt;next&lt;/strong&gt; button.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;kits&lt;/strong&gt;: select &lt;strong&gt;Mingw 64-bit&lt;/strong&gt;. press &lt;strong&gt;next&lt;/strong&gt; button.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: press &lt;strong&gt;finish&lt;/strong&gt; button.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/qt_creator/plain_c_app.PNG&quot; alt=&quot;Qt-Creator plain C app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new subfolder is created with &lt;em&gt;pc_sim.pro, pc_sim.pro.user&lt;/em&gt; and &lt;em&gt;main.c&lt;/em&gt; template.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;close project from Qt-Creator.&lt;/li&gt;
  &lt;li&gt;move &lt;em&gt;pc_sim.pro, pc_sim.pro.user&lt;/em&gt; to main directory. remove &lt;em&gt;pc_sim&lt;/em&gt; subfolder.&lt;/li&gt;
  &lt;li&gt;from Qt-Creator: open project &lt;em&gt;pc_sim.pro&lt;/em&gt;. Edit file &lt;em&gt;pc_sim.pro&lt;/em&gt; and remove this two lines:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SOURCES += \
      main.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/qt_creator/remove_souces.PNG&quot; alt=&quot;Qt-Creator remove template source&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;save project&lt;/li&gt;
  &lt;li&gt;in &lt;strong&gt;projects&lt;/strong&gt; pane: right click on pc_sim project and select &lt;strong&gt;Add Existing Directory&lt;/strong&gt; from menu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/qt_creator/Add_Dir.png&quot; alt=&quot;Qt-Creator add directory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All sources files and includes should be already selected by default.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;from file list: deselect folder &lt;em&gt;lv_examples&lt;/em&gt; and &lt;em&gt;SDL2&lt;/em&gt;. Then add only .c and .h files from folder &lt;em&gt;lv_examples/demo&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/qt_creator/file_select.PNG&quot; alt=&quot;Qt-Creator remove template source&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;edit &lt;em&gt;pc_sim.pro&lt;/em&gt; and add this lines to add SDL2 library and includes to the project:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LIBS += -L$$PWD/SDL2/lib/ -lmingw32 -lSDL2main -lSDL2

INCLUDEPATH += $$PWD/SDL2
DEPENDPATH += $$PWD/SDL2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/qt_creator/add_SDL_path.PNG&quot; alt=&quot;Qt-Creator add libraries path&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Save project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;build-and-run-the-project&quot;&gt;Build and Run the project&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Select &lt;strong&gt;release&lt;/strong&gt; build from left panel icon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/qt_creator/release.png&quot; alt=&quot;Qt-Creator manage kit&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Run demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/qt_creator/QT_littlevgl.PNG&quot; alt=&quot;Qt-Creator running LittlevGL demo in PC simulator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Qt-Creator is available also for Linux and MACOS. Adapting LittlevGL PC Simulator project on these OS should be simple.
The complete project is available at this Github link: &lt;a href=&quot;https://github.com/ScarsFun/pc_simulator&quot;&gt;https://github.com/ScarsFun/pc_simulator&lt;/a&gt;&lt;/p&gt;</content><author><name>ScarsFun</name></author><summary type="html">Qt-Creator is a powerful IDE and is easy manage non Qt project too. With the latest release Qt 5.12.0, GCC x64 compiler, Windows is also supported. This is a step by step tutorial to run LittlevGL PC simulator in Windows 10 from Qt-Creator 4.8.0 with Mingw 64 bit compiler.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/qt_creator/logo.png" /></entry><entry><title type="html">LittlevGL References</title><link href="http://localhost:4000/2018-12-26/references" rel="alternate" type="text/html" title="LittlevGL References" /><published>2018-12-26T00:00:00+01:00</published><updated>2018-12-26T00:00:00+01:00</updated><id>http://localhost:4000/2018-12-26/references</id><content type="html" xml:base="http://localhost:4000/2018-12-26/references">&lt;p&gt;&lt;strong&gt;Here you can find some projects where LittlevGL was used as GUI library.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please, write a few lines about your LittlevGL based project by hitting the Edit button &lt;a href=&quot;https://github.com/littlevgl/blog/blob/master/_posts/2018-12-26-references.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;style type=&quot;text/css&quot; scoped=&quot;&quot;&gt;
    td { width: 50%; } 
&lt;/style&gt;

&lt;p&gt;&lt;em&gt;Uploading projects are in progress&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;origokey---crypto-wallet&quot;&gt;OrigoKey - Crypto wallet&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/references/origokey.jpg&quot; alt=&quot;OrigoKey Crypto wallet with LittlevGL&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;A hardware wallet to securely store cryptocurrencies with 240x240 IPS display, capacitive touchpad, and STM32F4 microcontroller.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;avitab---x-plane-plugin&quot;&gt;AviTab - X-PLane plugin&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/references/avitab.png&quot; alt=&quot;AviTab uses LittlevGL in Virtual Reality&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;Tablet computer emulaltor for &lt;a href=&quot;https://www.x-plane.com/&quot;&gt;X-Plane flight simulator&lt;/a&gt; in virtual reality with pdf and map viewer. &lt;br /&gt; Check out the project on &lt;a href=&quot;https://github.com/fpw/avitab&quot;&gt;GitHub&lt;/a&gt;!&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;rgb-led-light-controller&quot;&gt;RGB LED Light Controller&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/references/c_light.jpg&quot; alt=&quot;RGB LED Light Controller GUI&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;RGB LED controller GUI with STM32F4 on a 800x480 TFT with Capacitve touch panel. &lt;br /&gt; From &lt;a href=&quot;http://sobir.in/&quot;&gt;Teguh Sobirin&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;christmas-lights-controller&quot;&gt;Christmas Lights Controller&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://harizanov.com/wp-content/uploads/2018/12/20181225_111359-e1545751524126-600x399.jpg&quot; alt=&quot;Christmas Lights Controller GUI&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;MQTT Christmas lights controller GUI with ESP32 on a 320x240 TFT with resistive touch panel. &lt;br /&gt; From &lt;a href=&quot;https://harizanov.com/wiki/wiki-home/tft32/&quot;&gt;Martin Harizanov&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>LittlevGL Community</name></author><summary type="html">Here you can find some projects where LittlevGL was used as GUI library.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/references/cover.png" /></entry><entry><title type="html">Extend the functionality of objects in LittlevGL</title><link href="http://localhost:4000/2018-12-13/extend-lvgl-objects" rel="alternate" type="text/html" title="Extend the functionality of objects in LittlevGL" /><published>2018-12-13T00:00:00+01:00</published><updated>2018-12-13T00:00:00+01:00</updated><id>http://localhost:4000/2018-12-13/extend-lvgl-objects</id><content type="html" xml:base="http://localhost:4000/2018-12-13/extend-lvgl-objects">&lt;p&gt;&lt;strong&gt;Although the &lt;a href=&quot;https://docs.littlevgl.com/#Object-types&quot;&gt;Objects in LittlevGL&lt;/a&gt; have a lot of built-in features sometimes you might need something special. For example, draw something unique on an object or change its behavior. 
In this post, I will show you how to add extra functionality to the objects in LittlevGL. You will also learn how LittlevGL works under to hood&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h2&gt;
&lt;p&gt;Maybe you already know about the inheritance among object types in LittlevGL. Don’t panic if don’t you can learn it now.&lt;/p&gt;

&lt;p&gt;Although C doesn’t support classes and inheritance as C++ does with a few tricks and limitations something similar can be achieved. In LittlevGL inheritance means that a derived object knows all the features of its ancestor.&lt;/p&gt;

&lt;p&gt;For example, a &lt;a href=&quot;https://docs.littlevgl.com/#Button&quot;&gt;Button&lt;/a&gt; is inherited from the &lt;a href=&quot;https://docs.littlevgl.com/#Container&quot;&gt;Container&lt;/a&gt;. The &lt;em&gt;Container&lt;/em&gt; has the &lt;em&gt;Layout&lt;/em&gt; feature so the &lt;em&gt;Button&lt;/em&gt; also has this feature. The &lt;em&gt;Container&lt;/em&gt; is inherited from the &lt;a href=&quot;https://docs.littlevgl.com/#Base-object&quot;&gt;Base object&lt;/a&gt;. 
The &lt;em&gt;Base object&lt;/em&gt; knows all the basic things like position and size. So the &lt;em&gt;Container&lt;/em&gt; and the &lt;em&gt;Button&lt;/em&gt; also have position and size attributes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/extend_lvgl_objects/inheritance.jpg&quot; alt=&quot;Inheritance example in LittlevGL&quot; /&gt;
&lt;em&gt;Inheritance example in LittlevGL&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Because the &lt;em&gt;Base object&lt;/em&gt; is the ancestor of every object type (sometimes indirectly through other objects types) every object type has size, position, and similar basic attributes.&lt;/p&gt;

&lt;h2 id=&quot;extended-data&quot;&gt;Extended data&lt;/h2&gt;
&lt;p&gt;In LittlevGL every object type has a data structure (&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;) which holds data for the objects. It is called &lt;strong&gt;extended data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, in case, of a &lt;em&gt;Button&lt;/em&gt; this structure stores the current state (pressed, released etc.) and the styles for each state.&lt;/p&gt;

&lt;p&gt;To work with inheritance the ancestors should see the object in same way independently if something is derived from it or not. 
So &lt;em&gt;Container&lt;/em&gt; shouldn’t care about if it’s really just a &lt;em&gt;Container&lt;/em&gt; or a &lt;em&gt;Button&lt;/em&gt;, the layout feature should work. 
To achieve it the extended data is declared like this:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*Example extended data of an ancestor */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ancestor_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/*Example extended data of a derived object*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ancestor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ancestor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/*Include the ancestors extend data first*/&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              &lt;span class=&quot;cm&quot;&gt;/*Add new data*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derived_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the key is to add the ancestors extended data first. This way if the ancestor reads the extended data as &lt;code class=&quot;highlighter-rouge&quot;&gt;ancestor_t&lt;/code&gt; is will see the correct type and if the derived reads it, it will see the &lt;em&gt;ancesor&lt;/em&gt; + &lt;em&gt;derived data&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;add-custom-extended-data-to-an-object-type&quot;&gt;Add custom extended data to an object type&lt;/h3&gt;

&lt;p&gt;Let’s see a silly but real life example. Store an integer temperature value in a button’s extended data:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*Custom extended data based on the Button*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_btn_ext_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/*The ancestor button structure*/&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;cm&quot;&gt;/*New custom data*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_btn_ext_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Called when the button is clicked
 * @param btn pointer to a button
 * @return LV_RES_OK because the button is not deleted here
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_res_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;btn_click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*Get the extended data*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp_btn_ext_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_ext_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Do something with the temperature value*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button temp: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_RES_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_btn_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_scr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_btn_set_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_BTN_ACTION_CLICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn_click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*Assign an action function*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_allocate_ext_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_btn_ext_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/*Re-alloacte the extended data*/&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Use the custom extended data*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp_btn_ext_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_ext_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it. Now you know how to add any custom data an object.&lt;/p&gt;

&lt;h2 id=&quot;custom-functions&quot;&gt;Custom functions&lt;/h2&gt;

&lt;p&gt;In LittlevGL every object has two special functions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Design function&lt;/strong&gt; defines how the object should look like&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Signal function&lt;/strong&gt; defines how the object should behave&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;design-function&quot;&gt;Design function&lt;/h3&gt;
&lt;p&gt;The design function of the objects are called automatically by the library when the object needs to be redrawn. A simple design function to draw a rectangle looks like this:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Example design function
 * @param obj pointer to the object to draw
 * @param mask only this area will be redrawn
 * @param mode see below
 * @return if mode == LV_DESIGN_COVER_CHK:
 *              true if the object fully covers the mask area
 *         else:
 *              always true  
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;example_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;lv_area_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                    &lt;span class=&quot;n&quot;&gt;lv_design_mode_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_DESIGN_COVER_CHK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Decide if the object's coordinates (obj-&amp;gt;coords) 
         * are fully cover mask or not */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_DESIGN_DRAW_MAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Draw the object. For example draw a rectangle. */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_style_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_draw_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_opa_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_DESIGN_DRAW_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* You can do here further drawings when all the 
         * children of this object are drawn.
         * For example, scroll bars of lv_page are drawn here to be on top*/&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It might look a little bit complicated. But usually you don’t have to write a totally new design function, just extend the existing one.&lt;/p&gt;

&lt;p&gt;Let’s continue the previous “button + temperature” example and display the stored temperature data on the button using a custom design function. For simplicity the text is not aligned vertically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/extend_lvgl_objects/design1.png&quot; alt=&quot;Extended design function adds custom text to a LittlevGL button&quot; /&gt;
&lt;em&gt;Extended design function adds custom text to a LittlevGL button&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*Store the original button design function here*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_design_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;lv_area_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_design_mode_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_DESIGN_COVER_CHK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;cm&quot;&gt;/*Use the original function for cover check*/&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_DESIGN_DRAW_MAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*Draw the original button first*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;old_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*Draw a label*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temp_btn_ext_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_ext_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Temp&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_draw_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_style_btn_rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_opa_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_TXT_FLAG_CENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_DESIGN_DRAW_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*Use the original function for post draw*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;old_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_btn_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_scr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_btn_design&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_design_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_set_design_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;animation-example&quot;&gt;Animation example&lt;/h4&gt;

&lt;p&gt;Now create a custom animation using some additional extended data and a new design function. The animation will change the button’s appearance to the pressed style and back when it is released.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/extend_lvgl_objects/btn_anim.gif&quot; alt=&quot;Animated button with LittlevGL&quot; /&gt;
&lt;em&gt;Animated button with LittlevGL&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*Store the original button design function here*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_design_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Called by the animation
 * @param btn pointer to a button to animate
 * @param value current value of animation
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;btn_anim_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Save the new value and refresh the object.
     * `anim_state` will be used in the design function*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp_btn_ext_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_ext_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_invalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Called when the button is clicked
 * @param btn pointer to a button
 * @return LV_RES_OK because the button is not deleted here
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_res_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;btn_click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*Start a play back animation */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_anim_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_anim_fp_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn_anim_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_anim_path_linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_cb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;act_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playback_pause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat_pause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_anim_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_RES_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;lv_area_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_design_mode_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_DESIGN_COVER_CHK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;cm&quot;&gt;/*Use the original function for cover check*/&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_DESIGN_DRAW_MAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*Draw a rectangle with the normal released style*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_draw_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                     &lt;span class=&quot;n&quot;&gt;lv_btn_get_style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_BTN_STYLE_REL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_opa_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Draw an other rectangle on top of the previous with pressed state but
         * set its opacity according to `anim_state`*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temp_btn_ext_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_ext_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_style_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_style_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_btn_get_style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_BTN_STYLE_PR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_draw_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_opa_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_DESIGN_DRAW_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*Use the original function for post draw*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;old_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_btn_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_scr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_btn_set_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_BTN_ACTION_CLICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn_click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_allocate_ext_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_btn_ext_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/*Re-alloacte the extended data*/&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Initialize the custom extended data*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp_btn_ext_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_ext_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Save the old design function and set the new one */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_btn_design&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_design_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_set_design_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_btn_design&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;signal-function&quot;&gt;Signal function&lt;/h3&gt;

&lt;p&gt;The signal function is responsible for the behavior of the objects. When something happens with an object the library automatically sends a signal to the object to notify it. The signal is processed in the &lt;em&gt;signal function&lt;/em&gt;  and the object can do something according to the event.&lt;/p&gt;

&lt;p&gt;For example, when an object is released &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_SIGNAL_RELEASED&lt;/code&gt; is sent. In this case, a button calls the user-defined release action.&lt;/p&gt;

&lt;p&gt;An other signal is &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_SIGNAL_CORD_CHG&lt;/code&gt;. For example, the &lt;a href=&quot;https://docs.littlevgl.com/#Page&quot;&gt;Page&lt;/a&gt; object uses it to limit the scrolling of the scrollable area.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/extend_lvgl_objects/page_limit.gif&quot; alt=&quot;The scrolling on a Page is limited&quot; /&gt;
&lt;em&gt;The scrolling on a Page is limited&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A signal function always calls its ancestor’s signal function first. This way an object type can inherit the behavior of its ancestors. For example, if a &lt;em&gt;Button&lt;/em&gt;’s size has changed the layout needs to be recalculated by the &lt;em&gt;Container&lt;/em&gt; (ancestor).&lt;/p&gt;

&lt;p&gt;So let’s see what happens:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You call &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_obj_set_size(btn, width, height)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lv_obj_set_size&lt;/code&gt; sends a &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_SIGNAL_CORD_CHG&lt;/code&gt; to the &lt;em&gt;Button&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;In the &lt;em&gt;Button&lt;/em&gt;’s signal function its ancestor’s (&lt;em&gt;Container&lt;/em&gt;) signal function is called&lt;/li&gt;
  &lt;li&gt;In the &lt;em&gt;Container&lt;/em&gt;’s signal function the layout is recalculated i. e. the children are repositioned according to the new size.&lt;/li&gt;
  &lt;li&gt;Finally, the button processes the signal, however. it has nothing to do with &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_SIGNAL_CORD_CHG&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So by inheriting the &lt;em&gt;Button&lt;/em&gt; from the &lt;em&gt;Container&lt;/em&gt;, all the &lt;em&gt;Container&lt;/em&gt; functionalities can be used by the &lt;em&gt;Button&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;position-limitation-with-a-custom-signal-function&quot;&gt;Position limitation with a custom signal function&lt;/h4&gt;

&lt;p&gt;I will show you an example, how to create a signal function which:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Doesn’t let a button to be dragged out of its parent&lt;/li&gt;
  &lt;li&gt;Enables only horizontal dragging&lt;/li&gt;
  &lt;li&gt;Animates the button to the middle on release&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without the new signal function it behaves like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/extend_lvgl_objects/knob_before.gif&quot; alt=&quot;Position limit still not applied&quot; /&gt;
&lt;em&gt;Position limit still not applied&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But with the new signal function:
&lt;img src=&quot;/assets/extend_lvgl_objects/knob.gif&quot; alt=&quot;Limit the position with signal function and add animation&quot; /&gt;
&lt;em&gt;Limit the position with signal function and add animation&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_signal_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_btn_signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*Store the old signal function*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;cm&quot;&gt;/*A label for the demo*/&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * The new Signal function
 * @param btn pointer to the button object
 * @param sign a signal type from `lv_signal_t` enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_res_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_btn_signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_signal_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_res_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* MANDAORY: Include the ancient signal function */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_btn_signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_RES_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Limit the horizontal movement if the coordinates are changed*/&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_SIGNAL_CORD_CHG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*Align vertically to the middle and use the limited x coordinate*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_obj_align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_ALIGN_IN_LEFT_MID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*If the knob is released ... */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_SIGNAL_RELEASED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_SIGNAL_PRESS_LOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
        &lt;span class=&quot;cm&quot;&gt;/* The Click action is not called if the button was dragged.
         * So call it manually*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_action_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click_action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_btn_get_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_BTN_ACTION_CLICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*Animate the knob back to the middle*/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_anim_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_anim_fp_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_obj_set_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_anim_path_linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_cb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;act_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playback_pause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat_pause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lv_anim_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Called when the btn is released */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_res_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;btn_click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Determine the side and update the info label*/&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_label_set_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Left&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_label_set_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Right&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;lv_obj_align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_ALIGN_OUT_BOTTOM_MID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_RES_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_knob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*Create a parent (gray rectangle)*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_scr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_set_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_set_style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_style_pretty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*Create a square rectangle button*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_btn_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_btn_signal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_obj_get_signal_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/*Save to old signal function*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_set_signal_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_btn_signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;cm&quot;&gt;/*Set a new signal function*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_btn_set_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_BTN_ACTION_CLICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn_click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*Set an action*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_set_drag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                         &lt;span class=&quot;cm&quot;&gt;/*Enable dragging*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_set_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                       &lt;span class=&quot;cm&quot;&gt;/*Set the size*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_ALIGN_CENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/*Align to the center of the parent*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_set_protect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_PROTECT_PRESS_LOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*To prevent press lost on fast drags*/&lt;/span&gt;
 
    &lt;span class=&quot;cm&quot;&gt;/*Create an info label for the demo*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;info_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_label_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_scr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_label_set_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Drag the knob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lv_obj_align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_ALIGN_OUT_BOTTOM_MID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;You have just learnt the three most important internal mechanisms of LittlevGL:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Extended data&lt;/li&gt;
  &lt;li&gt;Design function&lt;/li&gt;
  &lt;li&gt;Signal Function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use them them customise the exiting objects according to your needs!&lt;/p&gt;</content><author><name>kisvegabor</name></author><summary type="html">Although the Objects in LittlevGL have a lot of built-in features sometimes you might need something special. For example, draw something unique on an object or change its behavior. In this post, I will show you how to add extra functionality to the objects in LittlevGL. You will also learn how LittlevGL works under to hood</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/extend_lvgl_objects/cover.png" /></entry><entry><title type="html">Contributing to LittlevGL</title><link href="http://localhost:4000/2018-12-06/contributing" rel="alternate" type="text/html" title="Contributing to LittlevGL" /><published>2018-12-06T00:00:00+01:00</published><updated>2018-12-06T00:00:00+01:00</updated><id>http://localhost:4000/2018-12-06/contributing</id><content type="html" xml:base="http://localhost:4000/2018-12-06/contributing">&lt;p&gt;&lt;strong&gt;Do you have some free time to spend with programming? Are you working on an Embedded GUI project with LittlevGL? See how can you help to improve the graphics library!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many different possibilities to join the community. If you have some time to work with us I’m sure you will find something that fits you! You can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;answer other’s questions&lt;/li&gt;
  &lt;li&gt;report and/or fix bugs&lt;/li&gt;
  &lt;li&gt;suggest and/or implement new features&lt;/li&gt;
  &lt;li&gt;improve and/or translate the documentation&lt;/li&gt;
  &lt;li&gt;write a blog post about your experiences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But first, start with the most Frequently Asked Questions.&lt;/p&gt;

&lt;h2 id=&quot;faq-about-contributing&quot;&gt;FAQ about contributing&lt;/h2&gt;

&lt;h3 id=&quot;where-can-i-write-my-question-and-remarks&quot;&gt;Where can I write my question and remarks?&lt;/h3&gt;

&lt;p&gt;We use &lt;a href=&quot;https://github.com/littlevgl/lvgl/issues&quot;&gt;GitHub’s issue tracker&lt;/a&gt; to ask questions., report bugs and suggest features. But there are some simple rules:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Be kind and friendly.&lt;/li&gt;
  &lt;li&gt;Speak about one thing in one issue.&lt;/li&gt;
  &lt;li&gt;Give feedback and close the issue if your question is answered.&lt;/li&gt;
  &lt;li&gt;Tell what you experience or expect. &lt;em&gt;“The button is not working”&lt;/em&gt; is not enough info to get help.&lt;/li&gt;
  &lt;li&gt;If possible send an absolute minimal code example in order to reproduce the issue&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Markdown&lt;/a&gt; to format your post.&lt;/li&gt;
  &lt;li&gt;If you don’t get any answer in a week write a comment like “Can somebody help?”. Maybe your issue wasn’t noticed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-can-i-send-fixes-and-improvements&quot;&gt;How can I send fixes and improvements?&lt;/h3&gt;
&lt;p&gt;Merging new code happens via Pull Requests. If you are still not familiar with the Pull Requests (PR for short) here is a quick guide about them:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Fork&lt;/strong&gt; the &lt;a href=&quot;https://github.com/littlevgl/lvgl&quot;&gt;lvgl repository&lt;/a&gt;. To do this click the “Fork” button in the top right corner. It will “copy” the &lt;code class=&quot;highlighter-rouge&quot;&gt;lvgl&lt;/code&gt; repository to your GitHub account (&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/your_name?tab=repositories&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Clone&lt;/strong&gt;  the forked repository and add your updates&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Create a PR&lt;/strong&gt; on the GitHub on the page of you &lt;code class=&quot;highlighter-rouge&quot;&gt;lvgl&lt;/code&gt; repository(&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/your_name/lvgl&lt;/code&gt;) by hitting the “New pull request” button&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set the base branch&lt;/strong&gt;. It means where you want to merge your update. Fixes go to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, new features to the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;dev-x.y&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Describe&lt;/strong&gt; what is in the update. An example code is welcome if applicable.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some advice:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you are not sure about your fix or feature it’s better to open an issue first, and discuss the details there.&lt;/li&gt;
  &lt;li&gt;Maybe your fix or update won’t be perfect at first. Don’t be afraid, just improve it and push the new commits. The PR will be updated accordingly.&lt;/li&gt;
  &lt;li&gt;If your update needs some extra work it’s okay to say: &lt;em&gt;“I’m busy now and I will improve it soon”&lt;/em&gt; or &lt;em&gt;“Sorry, I don’t have time to improve it, I hope it helps in this form too”&lt;/em&gt;. So it’s better to say don’t have time to continue then saying nothing.&lt;/li&gt;
  &lt;li&gt;Please read and follow this &lt;a href=&quot;https://docs.littlevgl.com/#Coding-Style-Guide&quot;&gt;guide about the coding style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;where-is-the-documentation&quot;&gt;Where is the documentation?&lt;/h3&gt;

&lt;p&gt;You can read the documentation here: &lt;a href=&quot;https://docs.littlevgl.com/&quot;&gt;https://docs.littlevgl.com/&lt;/a&gt;&lt;br /&gt;
You can edit the documentation here: &lt;a href=&quot;https://github.com/littlevgl/doc&quot;&gt;https://github.com/littlevgl/doc&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;where-is-the-blog&quot;&gt;Where is the blog?&lt;/h3&gt;

&lt;p&gt;You can read the blog here: &lt;a href=&quot;https://blog.littlevgl.com/&quot;&gt;https://blog.littlevgl.com/&lt;/a&gt;&lt;br /&gt;
You can edit the blog here: &lt;a href=&quot;https://github.com/littlevgl/blog&quot;&gt;https://github.com/littlevgl/blog&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;so-how-and-where-can-i-contribute&quot;&gt;So how and where can I contribute?&lt;/h2&gt;

&lt;h3 id=&quot;answering-others-questions&quot;&gt;Answering other’s questions&lt;/h3&gt;

&lt;p&gt;It’s a great way to contribute to the library if you already use it. Just go the &lt;a href=&quot;https://github.com/littlevgl/lvgl/issues&quot;&gt;issue tracker&lt;/a&gt;, read the titles and if you are already familiar with a topic, don’t be shy, and write your suggestion.&lt;/p&gt;

&lt;h3 id=&quot;reporting-andor-fixing-bugs&quot;&gt;Reporting and/or fixing bugs&lt;/h3&gt;
&lt;p&gt;For simple bugfixes (typos, missing error handling, fixing a warning) is fine to send a Pull request directly. However, for more complex bugs it’s better to open an issue first. In the issue, you should describe how to reproduce the bug and even add the minimal code snippet.&lt;/p&gt;

&lt;h3 id=&quot;suggesting-andor-implementing-new-features&quot;&gt;Suggesting and/or implementing new features&lt;/h3&gt;
&lt;p&gt;If you have a good idea don’t hesitate to share with us. It’s even better if you have time to deal with its implementation. Don’t be afraid if you still don’t know LittlevGL well enough. We will help you to get started.&lt;/p&gt;

&lt;p&gt;During the implementation don’t forget the &lt;a href=&quot;https://docs.littlevgl.com/#Coding-Style-Guide&quot;&gt;Code style guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;improving-andor-translating-the-documentation&quot;&gt;Improving and/or translating the documentation&lt;/h3&gt;

&lt;p&gt;The documentation of LittlevGL is written in Markdown and available &lt;a href=&quot;https://github.com/littlevgl/doc&quot;&gt;here&lt;/a&gt; for editing. If you find some parts of the documentation obscure or insufficient just search the related &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; file, hit the edit icon and add your updates. This way a  new Pull request will be generated automatically.&lt;/p&gt;

&lt;p&gt;If you can devote more time to improve the documentation you can translate it!&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Just copy the English &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; files from the root folder to &lt;code class=&quot;highlighter-rouge&quot;&gt;locale/LANGUAGE_CODE&lt;/code&gt; (language code is e.g. DE, FR, ES etc)&lt;/li&gt;
  &lt;li&gt;Append the language code the end of files (e.g. Welcome_fr.md)&lt;/li&gt;
  &lt;li&gt;Update the filenames in &lt;code class=&quot;highlighter-rouge&quot;&gt;_Sidebar.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Translate the page(s) you want&lt;/li&gt;
  &lt;li&gt;Create a Pull request&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;writing-a-blog-post-about-your-experiences&quot;&gt;Writing a blog post about your experiences&lt;/h3&gt;

&lt;p&gt;Have you ported LittlevGL to a new platform? Have you created a fancy GUI? Do you know a great trick? 
You can share your knowledge on LittlevGL’s blog! It’s super easy to add your own post:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fork and clone the &lt;a href=&quot;https://github.com/littlevgl/blog&quot;&gt;blog repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Add your post in Markdown to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder.&lt;/li&gt;
  &lt;li&gt;Store the images and other resources in a dedicated folder in &lt;code class=&quot;highlighter-rouge&quot;&gt;assets&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create a Pull Request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The blog uses &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to convert the &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; files to a webpage. You can easily &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;run Jekyll offline&lt;/a&gt; to check your post before creating the Pull request&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I hope you have taken a liking to contribute to LittlevGL. A helpful and friendly community is waiting for you! :)&lt;/p&gt;</content><author><name>kisvegabor</name></author><summary type="html">Do you have some free time to spend with programming? Are you working on an Embedded GUI project with LittlevGL? See how can you help to improve the graphics library!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/contributing/cover.png" /></entry><entry><title type="html">Use PNG images in LittlevGL</title><link href="http://localhost:4000/2018-10-05/png_converter" rel="alternate" type="text/html" title="Use PNG images in LittlevGL" /><published>2018-10-05T00:00:00+02:00</published><updated>2018-10-05T00:00:00+02:00</updated><id>http://localhost:4000/2018-10-05/png_converter</id><content type="html" xml:base="http://localhost:4000/2018-10-05/png_converter">&lt;p&gt;If you already used images in LittlevGL probably you used the &lt;a href=&quot;https://littlevgl.com/image-to-c-array&quot;&gt;Online image converter&lt;/a&gt; to convert an image to a C array and you compiled the C array into your code. However, since v5.2 LittlevGL has an image decoder interface which allows adding your own decoder functions to open and read any type of images. In this post, I will show you how to add and use the &lt;a href=&quot;https://github.com/lvandeve/lodepng&quot;&gt;lodepng&lt;/a&gt; library to display PNG images in real time.&lt;/p&gt;

&lt;h2 id=&quot;before-get-started&quot;&gt;Before get started&lt;/h2&gt;
&lt;p&gt;You need to know that opening PNG images in resource-limited embedded systems has advantages and disadvantages too. The main advantage is that PNG images have much smaller size than an uncompressed image. The disadvantage is that you need a big buffer to describe the whole image and in addition, the decoding needs some time. However, some considerations can be done. For example, keep the last image in the buffer, probably it will be required again or, if you have more RAM, keep the last 3 images buffered. This way you can save ROM because you store the images as PNG and you decode only those which are required. These all depend on your system and resources.&lt;/p&gt;

&lt;h2 id=&quot;start-littlevgl-in-a-pc-simulator&quot;&gt;Start LittlevGL in a PC simulator&lt;/h2&gt;
&lt;p&gt;It’s much faster and easier to work on PC compared to an embedded hardware. Therefore to help your development LittlevGL is ported to Windows, Linux and OSX too. If you didn’t set-up you PC simulator environment yet here is a great time to do it! Read this tutorial: https://littlevgl.com/pc-simulator&lt;/p&gt;

&lt;h2 id=&quot;add-and-test-the-png-decoder-library-with-a-file&quot;&gt;Add and test the PNG decoder library with a file&lt;/h2&gt;
&lt;p&gt;If you are not interested in the implementation details you can &lt;strong&gt;download&lt;/strong&gt; a ready use &lt;a href=&quot;https://github.com/littlevgl/blog/raw/master/assets/png_converter/png_decoder.zip&quot;&gt;PNG decoder for LittelvGL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some PNG decoder libraries even for embedded systems. Basically, you can choose any of them because they all work similarly, however, there can be differences in speed and performance. For this tutorial, I’ve chosen the &lt;a href=&quot;https://github.com/lvandeve/lodepng&quot;&gt;lodepng&lt;/a&gt; library. This library consists of only 2 files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;lodepng.cpp&lt;/li&gt;
  &lt;li&gt;lodepng.h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download this two files and copy into your project next to your &lt;em&gt;main.c&lt;/em&gt; file.  As you can see it’s a &lt;strong&gt;cpp&lt;/strong&gt; file but don’t worry, you can rename it to &lt;strong&gt;lodepng.c&lt;/strong&gt; if you want.&lt;/p&gt;

&lt;p&gt;So to see how &lt;em&gt;lodepng&lt;/em&gt; works we will decode a PNG image file into an array and use this array as an image source in LittlevGL.&lt;/p&gt;

&lt;p&gt;I used the image below and copied into the project’s root folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/png_converter/png_decoder_test.png&quot; alt=&quot;Example PNG image to decode with LittlevGL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For simplicity, I added all the code into &lt;em&gt;main.c&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So the first thing is to include &lt;em&gt;lodepng&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;lodepng.h&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now read the file and load it’s content to a buffer. It should be after &lt;em&gt;lv_init()&lt;/em&gt; :&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;cm&quot;&gt;/*For the return values of png decoder functions*/&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*Load the PNG file into buffer. It's still compressed (not decoded)*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/*Pointer to the loaded data. Same as the original file just loaded into the RAM*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/*Size of `png_data` in bytes*/&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;png_decoder_test.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/*Load the file*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error %u: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_error_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now decode the PNG image from the buffer.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*Decode the PNG image*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/*Will be pointer to the decoded image*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;cm&quot;&gt;/*Will be the width of the decoded image*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;cm&quot;&gt;/*Will be the width of the decoded image*/&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*Decode the loaded image in ARGB8888 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_decode32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error %u: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_error_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The image is decompressed into &lt;em&gt;png_decoded&lt;/em&gt;. We only need to set-up a LittlevGL image descriptor and create an image object.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*Initialize an image descriptor for LittlevGL with the decoded image*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_img_dsc_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;png_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;always_zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                          &lt;span class=&quot;cm&quot;&gt;/*It must be zero*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;png_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_FORMAT_TRUE_COLOR_ALPHA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/*Set the color format*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;png_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;png_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;png_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;png_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*Create an image object and set the decoded PNG image as it's source*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_obj_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_img_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_scr_act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*Create the an image object in LittlevGL*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_img_set_src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                          &lt;span class=&quot;cm&quot;&gt;/*Set the image source to the decoded PNG*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_obj_set_drag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                             &lt;span class=&quot;cm&quot;&gt;/*Make to image dragable*/&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*Set a non-white background color for the scren to see the alpha is working on the image*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_style_scr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main_color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_COLOR_MAKE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xAA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After compile and run I got this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/png_converter/png_decode_one.png&quot; alt=&quot;PNG image decoded in LittlevGL with lodepng&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;test-the-png-decoder-library-with-a-png-file-stored-in-rom&quot;&gt;Test the PNG decoder library with a PNG file stored in ROM&lt;/h2&gt;

&lt;p&gt;If you &lt;strong&gt;don’t have a file system&lt;/strong&gt; on your device and you’d like to store the PNG image in ROM and decode it when you need it you can use the &lt;a href=&quot;https://littlevgl.com/image-to-c-array&quot;&gt;Online image converter&lt;/a&gt; to get a C array from an uncompressed PNG file. Just upload the PNG image, select the&lt;strong&gt;Raw with alpha&lt;/strong&gt; color format and &lt;strong&gt;C array&lt;/strong&gt; output format. Here is &lt;a href=&quot;/blog/png/png_decoder_test.c&quot;&gt;the result file&lt;/a&gt;. Copy this file in your project and modify the decoder code like below. You just need to remove the “load from file” section and use the data from the converted file.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LV_IMG_DECLARE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_decoder_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/*Declare the C array*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;cm&quot;&gt;/*For the return values of png decoder functions*/&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*Decode the PNG image*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/*Will be pointer to the decoded image*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;cm&quot;&gt;/*Will be the width of the decoded image*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;cm&quot;&gt;/*Will be the width of the decoded image*/&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/*Decode the loaded image in ARGB8888 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_decode32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_decoder_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_decoder_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error %u: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_error_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*Initialize an image descriptor for LittlevGL with the decoded image*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It resulted in the same image.&lt;/p&gt;

&lt;h2 id=&quot;test-the-png-decoders-speed-on-a-microcontroller&quot;&gt;Test the PNG decoder’s speed on a microcontroller&lt;/h2&gt;
&lt;p&gt;I tested the PNG decoder’s speed with an &lt;a href=&quot;https://www.st.com/en/microcontrollers/stm32f429zi.html&quot;&gt;STM32F429ZI&lt;/a&gt; microcontroller which runs at 180MHz and has 2 MB flash and 256 kB RAM. The test image had &lt;strong&gt;100 x 65&lt;/strong&gt; resolution. The decompression lasted for &lt;strong&gt;7 ms&lt;/strong&gt;.  Note that the result is in ARGB8888 format which might be converted to the systems color format (e.g. RGB565). This conversion required 1 ms.&lt;/p&gt;

&lt;h2 id=&quot;connect-the-png-decoder-to-littlevgl&quot;&gt;Connect the PNG decoder to LittlevGL&lt;/h2&gt;
&lt;p&gt;LittlveGL requires 4 functions to decode your custom image formats:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;decoder info&lt;/strong&gt;  used to get the most basic information about the image like it’s width, height and color format.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;decoder open&lt;/strong&gt;  can work in two ways:
    &lt;ul&gt;
      &lt;li&gt;Open and decode the whole image into a buffer and return with this buffer. (it will be used with PNG images)&lt;/li&gt;
      &lt;li&gt;Only prepare the decoding and return with &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;. In this case &lt;code class=&quot;highlighter-rouge&quot;&gt;decoder read&lt;/code&gt; will be called to read the relevant parts of the image line-by-line.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;decoder read line&lt;/strong&gt; as described above it is called to read ONLY the required lines of the image. If the image decoder supports partial decompression it can save RAM and time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;decoder close&lt;/strong&gt; free the used resources&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let’s see how to implement these function to decode PNG images!&lt;/p&gt;

&lt;h2 id=&quot;decoder-info&quot;&gt;Decoder info&lt;/h2&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Get info about a PNG image
 * @param src can be file name or pointer to a C array
 * @param header store the info here
 * @return LV_RES_OK: no error; LV_RES_INV: can't get the info
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lv_res_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decoder_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_img_header_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;lv_img_src_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_img_src_get_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/*Get the source type*/&lt;/span&gt;

     &lt;span class=&quot;cm&quot;&gt;/*If it's a PNG file...*/&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_SRC_FILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;              &lt;span class=&quot;cm&quot;&gt;/*Check the extension*/&lt;/span&gt;

             &lt;span class=&quot;cm&quot;&gt;/* Read the width and height from the file. They have a constant location:
              * [16..23]: width
              * [24..27]: height
              */&lt;/span&gt;
             &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_RES_INV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;fseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEEK_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;fread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

             &lt;span class=&quot;cm&quot;&gt;/*Save the data in the header*/&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;always_zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_FORMAT_RAW_ALPHA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;cm&quot;&gt;/*The width and height are stored in Big endian format so convert them to little endian*/&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00ff0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lv_coord_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00ff0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_RES_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;cm&quot;&gt;/*If it's a PNG file in a  C array...*/&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_SRC_VARIABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_img_dsc_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_dsc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;always_zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/*Save the color format*/&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/*Save the color width*/&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/*Save the color height*/&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_RES_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_RES_INV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/*If didn't succeeded earlier then it's an error*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;decoder-open&quot;&gt;Decoder open&lt;/h2&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/*Will be pointer to the decoded image*/&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Open a PNG image and return the decided image
 * @param src can be file name or pointer to a C array
 * @param style style of the image object (unused now but certain formats might use it)
 * @return pointer to the decoded image or  `LV_IMG_DECODER_OPEN_FAIL` if failed
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decoder_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_style_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;cm&quot;&gt;/*For the return values of PNG decoder functions*/&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;lv_img_src_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_img_src_get_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/*Get the source type*/&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*If it's a PNG file...*/&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_SRC_FILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;              &lt;span class=&quot;cm&quot;&gt;/*Check the extension*/&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/*Load the PNG file into buffer. It's still compressed (not decoded)*/&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;cm&quot;&gt;/*Pointer to the loaded data. Same as the original file just loaded into the RAM*/&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/*Size of `png_data` in bytes*/&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/*Load the file*/&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error %u: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_error_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_DECODER_OPEN_FAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/*Decode the PNG image*/&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;cm&quot;&gt;/*Will be the width of the decoded image*/&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;cm&quot;&gt;/*Will be the width of the decoded image*/&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/*Decode the loaded image in ARGB8888 */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_decode32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error %u: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_error_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_DECODER_OPEN_FAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*The image is fully decoded. Return with its pointer*/&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*If it's a PNG file in a  C array...*/&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_SRC_VARIABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lv_img_dsc_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_dsc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;cm&quot;&gt;/*No used, just required by he decoder*/&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;cm&quot;&gt;/*No used, just required by he decoder*/&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*Decode the image in ARGB8888 */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lodepng_decode32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_dsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_DECODER_OPEN_FAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*Return with its pointer*/&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LV_IMG_DECODER_OPEN_FAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/*If not returned earlier then it failed*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;## Decoder close
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Free the allocated resources
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png_decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;register-the-decoder-functions-in-littlevgl&quot;&gt;Register the decoder functions in LittlevGL&lt;/h2&gt;
&lt;p&gt;And finally the created functions should be regitered in LittlevGL:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lv_img_decoder_set_custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoder_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this, if you can set PNG images from file or C array as the source of &lt;a href=&quot;https://docs.littlevgl.com/#Image&quot;&gt;image object’s&lt;/a&gt; of LittlevGL&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You just learned how to use the image decoder interface of LittlevGL to add a custom image format. It’s a powerful feature which enables you to use any type of images according to your needs. You can even convert your images to a unique format which exactly meet your needs.&lt;/p&gt;</content><author><name>kisvegabor</name></author><summary type="html">If you already used images in LittlevGL probably you used the Online image converter to convert an image to a C array and you compiled the C array into your code. However, since v5.2 LittlevGL has an image decoder interface which allows adding your own decoder functions to open and read any type of images. In this post, I will show you how to add and use the lodepng library to display PNG images in real time.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/png_converter/cover.png" /></entry><entry><title type="html">New release v5.2 - New objects, new features and more</title><link href="http://localhost:4000/2018-10-01/release_v5_2" rel="alternate" type="text/html" title="New release v5.2 -  New objects, new features and more" /><published>2018-10-01T00:00:00+02:00</published><updated>2018-10-01T00:00:00+02:00</updated><id>http://localhost:4000/2018-10-01/release_v5_2</id><content type="html" xml:base="http://localhost:4000/2018-10-01/release_v5_2">&lt;h2 id=&quot;new-objects&quot;&gt;New objects&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Image button&lt;/li&gt;
  &lt;li&gt;Calendar&lt;/li&gt;
  &lt;li&gt;Arc&lt;/li&gt;
  &lt;li&gt;Preloader&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7599318/45851820-0fc4a380-bd3d-11e8-8dab-c7d98b12879e.png&quot; alt=&quot;Image button, calendar arc and preloader in LittelvGL embedded GUI v5.2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;draw-and-rendering&quot;&gt;Draw and rendering&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Line draw&lt;/strong&gt; algorithm is improved to support perpendicular line endings&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Arc drawing&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shadow drawing&lt;/strong&gt; improvements&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Custom VDB write&lt;/strong&gt; function can be registered in the display driver to support non-standard color formats. This the VDB content can be directly flushed to the display.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RGB565 swap&lt;/strong&gt; to swap the two bytes of RGB565 colors. It makes possible to simply send the pixel’s data via a 8-bit serial interface (e.g. SPI). It can be enabled in &lt;em&gt;lv_conf.h&lt;/em&gt; by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_COLOR_16_SWAP&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VDB address&lt;/strong&gt; can be set in runtime with &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_vdb_set_adr()&lt;/code&gt;. Useful if you want to use DMA in the &lt;code class=&quot;highlighter-rouge&quot;&gt;disp_flush&lt;/code&gt; function but the VDB need to be allocated in a specific way.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;New image formats&lt;/strong&gt; supporting &lt;strong&gt;Indexed&lt;/strong&gt; and &lt;strong&gt;Grayscale&lt;/strong&gt; formats too to save memory&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Image decoder interface&lt;/strong&gt; to add support to any image format like PNG&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dithering&lt;/strong&gt; support in Online image converter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-object-features&quot;&gt;New object features&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;lv_obj&lt;/strong&gt; opa scale attribute added to scale the current opacity of an object and its children (useful to fade in/out a group of objects)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lv_label&lt;/strong&gt; LV_LABEL_ALIGN_RIGHT added to enable right alignmenet of texts.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lv_label&lt;/strong&gt; LV_LABEL_LONG_CROP long mode to simply crop the text out of the label’s size.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lv_btn&lt;/strong&gt; Ink effect feature added to play an animation effect when a button is clicked and released. Can be enabled with &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_btn_set_ink_in_time()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_btn_set_ink_wait_time()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_btn_set_ink_out_time()&lt;/code&gt; and LV_BTN_INK_EFFECT` need to be enabled in &lt;em&gt;lv_conf.h&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lv_page, lv_win, lv_ta&lt;/strong&gt; scrolling is added on &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_GROUP_KEY_UP/DOWN/LEFT/RIGHT&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lv_page&lt;/strong&gt; temporal scrollbar hide option is added (&lt;code class=&quot;highlighter-rouge&quot;&gt;LV_SB_MODE_HIDE&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lv_ta&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;max_length&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;accepted_chars&lt;/code&gt; attributes are added.d to be enabled in &lt;em&gt;lv_conf.h&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lv_ta&lt;/strong&gt; action can be added with &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_ta_set_action()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other-new-features&quot;&gt;Other new features:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SYMBOL_DUMMY: If added before string then &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_img&lt;/code&gt; will display the text. This way where icons need and an image a text can be set as well.&lt;/li&gt;
  &lt;li&gt;Monospace font support (set the width in the &lt;a href=&quot;https://littlevgl.com/ttf-font-to-c-array&quot;&gt;Online converter&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;LV_FONT_CUSTOM define added in lv_conf.h where you can enumerate you custom fonts to make them global&lt;/li&gt;
  &lt;li&gt;LV_CONF_INCLUDE_SIMPLE: define it as a compiler symbol to include lv_conf.h like &lt;code class=&quot;highlighter-rouge&quot;&gt;include &quot;lv_conf.h&quot;&lt;/code&gt; instead of using its relative path.&lt;/li&gt;
  &lt;li&gt;Click focus: you can enable focusing on an object in a group when it is clicked by a pointer an input device (mouse or touchpad)&lt;/li&gt;
  &lt;li&gt;Add LV_GROUP_KEY_DEL&lt;/li&gt;
  &lt;li&gt;Log system added to print useful debug info&lt;/li&gt;
  &lt;li&gt;Uniscii monospace font is added as built-in font&lt;/li&gt;
  &lt;li&gt;Edit/Navigate mode can be enabled for objects in a group. Useful for encoder based navigation.&lt;/li&gt;
  &lt;li&gt;Adding a new character encoding interface (other than the built-in UTF-8) made easy&lt;/li&gt;
  &lt;li&gt;LV_INDEV_TYPE_ENCODER: Encoder input device type (Left/Right/Push)&lt;/li&gt;
  &lt;li&gt;Opportunity to use your existing tick handler instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_tick_inc&lt;/code&gt;. See &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_conf_templ.h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Themes can be changed in runtime (set &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_THEME_LIVE_UPDATE&lt;/code&gt; in lv_conf.h)&lt;/li&gt;
  &lt;li&gt;A new theme called: Nemo&lt;/li&gt;
  &lt;li&gt;lv_fs_trunc and lv_fs_rename added&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kisvegabor</name></author><summary type="html">New objects Image button Calendar Arc Preloader</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/release_v5_2/cover.png" /></entry><entry><title type="html">New release v5.1 - 4x Faster Anti-aliasing, Sparse Font Support and more</title><link href="http://localhost:4000/2018-03-12/release_v5_1" rel="alternate" type="text/html" title="New release v5.1 -  4x Faster Anti-aliasing, Sparse Font Support and more" /><published>2018-03-12T00:00:00+01:00</published><updated>2018-03-12T00:00:00+01:00</updated><id>http://localhost:4000/2018-03-12/release_v5_1</id><content type="html" xml:base="http://localhost:4000/2018-03-12/release_v5_1">&lt;p&gt;&lt;strong&gt;Here is the new v5.1 release of LittelvGL with a lot of updates including 4x faster anti-aliasing, sparse font support to save ROM for Asian fonts, scalable and beautiful font anti-aliasing, pixel level opacity on images, easy to use online font and image converters and significant code size reduction.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;4x-faster-anti-aliasing&quot;&gt;4x faster anti-aliasing&lt;/h2&gt;
&lt;p&gt;Due to a massive rework in the anti-aliasing system it become 4 times faster then it was in v5.0. It means practically no performance loss for anti-aliasing! In v5.1 anti-aliasing is calculated during the rendering process hence the old “draw everything in double size and downscale” is not required anymore. This way only few pixel will be put to the appropriate position to make lines or curves smooth and even.&lt;/p&gt;

&lt;p&gt;The diagram below shows some measurement  with v5.0 and v5.1 using the &lt;a href=&quot;https://github.com/littlevgl/lv_examples/tree/master/lv_apps/benchmark&quot;&gt;benchmark&lt;/a&gt; application. The results are expressed in FPS.
&lt;img src=&quot;/assets/release_v5_1/v5_0_v5_1_comparision.png&quot; alt=&quot;v5.0 and v5.1 comparison: faster anti-aliasing &quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Setting&lt;/th&gt;
      &lt;th&gt;v5.0 no AA&lt;/th&gt;
      &lt;th&gt;v5.0 AA&lt;/th&gt;
      &lt;th&gt;v5.1 no AA&lt;/th&gt;
      &lt;th&gt;v5.1 AA&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Plain&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;125&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Wallpaper&lt;/td&gt;
      &lt;td&gt;53&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;71&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Wp. recolor&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Opacity&lt;/td&gt;
      &lt;td&gt;84&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Shadows&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;34&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;All enabled&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;sparse-font-support-and-new-font-anti-aliasing-system&quot;&gt;Sparse font support and new font-anti aliasing system&lt;/h2&gt;
&lt;p&gt;To generate fonts for v5.1 you can use a brand new online TTF font converter tool. Available here: https://littlevgl.com/ttf-font-to-c-array
With this tool you can specify a range of character to convert and optionally you can list the characters to include in the font. It is very useful Asian fonts where only a few characters are used from a big Unicode range.&lt;/p&gt;

&lt;p&gt;The former &lt;code class=&quot;highlighter-rouge&quot;&gt;LV_FONT_ANTIALIAS&lt;/code&gt; option is removed from lv_conf.h. Instead you can specify a bpp (bit-per-pixel) value for each font (1, 2, 4 or 8 bpp are supported). It result better customization to save memory (high bpp for small fonts, low bpp for larger fonts) and in general gives better result with same font memory footprint. You can enable the  built-in fonts with 1, 2, 4 or 8 values to specify their bpp.&lt;/p&gt;

&lt;h2 id=&quot;updates-on-image-handling&quot;&gt;Updates on image handling&lt;/h2&gt;
&lt;p&gt;The old chrma keying (LV_COLOR_TRANSP pixels are transparent) is still available but there is a new feature too: you can assign an Alpha byte to every pixel to realize pixel level opacity. The images with pixel level opacity can have really smooth edges compared to Chroma keying. 
To convert images for LittlevGL and other online tool is created: https://littlevgl.com/image-to-c-array&lt;/p&gt;

&lt;p&gt;In v5.0 you needed to create a file from image data in the RAMFS and then use the file’s path in &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_img_set_file()&lt;/code&gt;. Now - in v5.1 - a more general and resource friendly way is introduced. You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_img_set_src()&lt;/code&gt; function to set a new source for an image object. There are 3 image sources:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;C array compiled in the code. E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_img_set_src(img1, &amp;amp;wallpaper_img)&lt;/code&gt;. In the example &lt;em&gt;wallpaper_img&lt;/em&gt; is generated by the online converter.&lt;/li&gt;
  &lt;li&gt;Externally stored binary file. E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_img_set_src(img1, &quot;S:/path/to/image.bin&quot;)&lt;/code&gt;. &lt;em&gt;image.bin&lt;/em&gt; is also created with the online tool and stored for example on an SD card.&lt;/li&gt;
  &lt;li&gt;Symbols (as text): E.g.  &lt;code class=&quot;highlighter-rouge&quot;&gt;lv_img_set_src(img1, SYMBOL_CLOSE)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more check the tutorial about the images: https://github.com/littlevgl/lv_examples/tree/master/lv_tutorial/6_images&lt;/p&gt;

&lt;h2 id=&quot;code-size-reduction&quot;&gt;Code size reduction&lt;/h2&gt;
&lt;p&gt;The v5.1 can be compiled in less then 50kB with 10 kB RAM usage. In such a configuration you can use a few object types (a new object type needs ~3kB ROM) and buffer drawing (LV_VDB_SIZE   2048). It makes LittlevGL capable to run on simple cheap devices with only 64kB ROM like &lt;a href=&quot;http://www.st.com/en/microcontrollers/stm32f103c8.html&quot;&gt;STM32F103C8&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;migrating-from-v50-to-v51&quot;&gt;Migrating from v5.0 to v5.1&lt;/h2&gt;
&lt;p&gt;However its a minor release you need to do a few things when updating to v5.1:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Refresh your lv_conf.h from lv_conf_templ.h&lt;/li&gt;
  &lt;li&gt;Regenerate your images and fonts using the online converters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;all-new-features&quot;&gt;All new features&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;lv_refr_set_roundig_cb(): set a function to modify the invalidated area for special display controllers&lt;/li&gt;
  &lt;li&gt;lv_group_set_focus_cb(): set function to call when a new object is focused #94&lt;/li&gt;
  &lt;li&gt;lv_obj_get_type() return string, e.g. “lv_slider”, “lv_btn” etc #91&lt;/li&gt;
  &lt;li&gt;Font handling extension for effective Chiese font handling (cutsom read functions)&lt;/li&gt;
  &lt;li&gt;Remove LV_FONT_ANTIALIAS and add fonts with BPP (bit-per-pixel): 1, 2, 4 and 8&lt;/li&gt;
  &lt;li&gt;lv_img: add pixel level opacity option (ARGB8888 or ARGB8565) (make image upscale pointless)&lt;/li&gt;
  &lt;li&gt;LV_ANTIALIAS rework: meaning anti-alias lines and curves&lt;/li&gt;
  &lt;li&gt;Merge symbol fonts (basic, file and feedback) into one font&lt;/li&gt;
  &lt;li&gt;lv_group: different default style_mod function with LV_COLOR_DEPTH   1&lt;/li&gt;
  &lt;li&gt;lv_img_set_src() to handle file path, symbols and const variables with one function&lt;/li&gt;
  &lt;li&gt;LV_PROTECT_PRESS_LOST: prevent the input devices to NOT find new object when the object’s pressing is lost&lt;/li&gt;
  &lt;li&gt;lv_label: draw style.body.padding.hor/ver greater body if body_draw is enabled&lt;/li&gt;
  &lt;li&gt;LV_LAYOUT_PRETTY: in one row align obeóject vertically to middle&lt;/li&gt;
  &lt;li&gt;Add user data option to lv_indev_drv_t and pass it with lv_indev_data_t to the read function. #115&lt;/li&gt;
  &lt;li&gt;LV_GROUP_KEY_ENTER_LONG: sent by the library on long press of LV_GROUP_KEY_ENTER to trigger long press of the object #113&lt;/li&gt;
  &lt;li&gt;LV_INDEV_TYPE_BUTTON: for a hatdware buttons which press a point on a screen&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;lv_chart: Fix the use of point_num more then 256&lt;/li&gt;
  &lt;li&gt;lv_label: anim. time wasn’t applyed for LV_LABEL_LONG_ROLL&lt;/li&gt;
  &lt;li&gt;lv_txt_utf8_size fix for 4 byte characters&lt;/li&gt;
  &lt;li&gt;lv_slider: fix knob_in with not zero min value&lt;/li&gt;
  &lt;li&gt;lv_area_is_on: handled some cases wrong&lt;/li&gt;
  &lt;li&gt;lv_indev: buffered indevs (return &lt;em&gt;true&lt;/em&gt; in indev_read) was handled as non-buffered&lt;/li&gt;
  &lt;li&gt;drag: don’t invalidate if the object wasn’t moved&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;v5.1 brought a lot of changes to fulfill your needs and we will continue to add new features for you! If you have an idea or have question don’t hesitate to ask on &lt;a href=&quot;https://github.com/littlevgl/lvgl&quot;&gt;GitHub&lt;/a&gt;. Don’t forget to Star the repository to be informed about news and become part of the community!&lt;/p&gt;</content><author><name>kisvegabor</name></author><summary type="html">Here is the new v5.1 release of LittelvGL with a lot of updates including 4x faster anti-aliasing, sparse font support to save ROM for Asian fonts, scalable and beautiful font anti-aliasing, pixel level opacity on images, easy to use online font and image converters and significant code size reduction.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/release_v5_1/cover.png" /></entry></feed>